version: '3.8'

services:
  database:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: ideas_tracker
      POSTGRES_USER: ideas_tracker_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ideas_tracker_user -d ideas_tracker"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ideas_tracker
      DB_USER: ideas_tracker_user
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key_here_minimum_32_characters}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your_refresh_secret_key_here_minimum_32_characters}
      PORT: 3001
      FRONTEND_URL: http://localhost:5173
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      VITE_API_URL: http://localhost:3001/api
    ports:
      - "5173:5173"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge